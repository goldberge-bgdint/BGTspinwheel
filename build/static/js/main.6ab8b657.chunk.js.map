{"version":3,"sources":["spinningmain/Spinningmain.jsx","spinningwheel/Spinningwheel.jsx","index.js"],"names":["Spinningmain","Spinningwheel","_Component","Object","inherits","_super","createSuper","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","concat","state","list","JSON","parse","window","localStorage","getItem","radius","rotate","easeOut","angle","top","offset","net","result","spinning","topPosition","num","topSpot","degreesOff","Math","PI","setState","spin","randomSpin","floor","random","setTimeout","getResult","_this$state","netRotation","travel","count","reset","createClass","key","value","renderWheel","numOptions","arcSize","i","text","renderSector","getColor","index","start","arc","color","canvas","document","getElementById","ctx","getContext","x","width","y","height","startAngle","endAngle","baseSize","textRadius","beginPath","lineWidth","strokeStyle","font","fillStyle","stroke","save","translate","cos","sin","fillText","measureText","restore","r","g","b","react_default","a","createElement","className","data-v-f7311458","id","src","style","transform","alt","WebkitTransform","WebkitTransition","position","right","type","onClick","fontWeight","fontSize","href","Component","App","dist","basename","process","react_router_dist","path","element","spinningwheel_Spinningwheel","React","rootElement","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.6ab8b657.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport \"./BGDspinner.scoped.css\"\nimport \"./nicepage.scoped.css\"\nimport * as xlsx from \"xlsx\";\n\nfunction Spinningmain() {\n\n  let [sheetstatus,setsheetstatus] = useState (\"invalid\")\n  // let [attendencesheet,setattendencesheet] =  useState ([])\n\n  const readUploadFile = (e) => {\n    e.preventDefault();\n    try {\n\n      if (e.target.files) {\n        // converting to json\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const data = e.target.result;\n            const workbook = xlsx.read(data, { type: \"array\" });\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[sheetName];\n            const json = xlsx.utils.sheet_to_json(worksheet);\n            let dummysheet = []  \n\n            // filtering names\n            json.forEach(e=>{\n             let arr = Object.values(e)\n             arr.forEach(c=>{\n              if(c==\"On Time\")\n              {\n                if(arr[2]!=\"Hafiz Nabeel Zia\" && arr[2]!=\"Ibtesam Moatisim Khan\" && arr[2]!=\"Muhammad Aziz\" )\n                {\n                  dummysheet.push(arr[2])\n                }\n                else\n                return 0\n              }\n             })\n            })\n\n            // parsing list\n            window.localStorage.setItem('participents',JSON.stringify(dummysheet));\n            setsheetstatus(\"valid\")\n\n        };\n        reader.readAsArrayBuffer(e.target.files[0]);\n      }\n      \n    } catch (error) {\n      alert(\"Unknown error! Please try again\")\n      setsheetstatus(\"invalid\")\n    }\n\n    }\n\n  let validatesheet = ( )=>{\n\n    if(sheetstatus!=\"invalid\")\n    {\n        document.getElementById(\"upload\").value = '';  \n        window.location.href = \"/BGTspinwheel/bgdspinner\"\n    }\n    else\n    {\n      alert(\"Please submit valid attendence sheet\")\n    }\n\n  }\n\n  return (\n    <div className='u-body u-xl-mode' >\n\n  <section className=\"u-clearfix u-section-1\" id=\"sec-bd6f\">\n  <div className=\"u-container-style u-expanded-width u-group u-image u-image-1\" data-image-width={1193} data-image-height={676}>\n    <div className=\"u-container-layout u-container-layout-1\">\n      <img className=\"u-image u-image-contain u-image-default u-image-2\" src=\"images/Group.png\" alt data-image-width={670} data-image-height={590} />\n      <h4 className=\"u-text u-text-custom-color-1 u-text-default u-text-1\">BGD Spin Wheel</h4>\n      <p className=\"u-text u-text-custom-color-1 u-text-default u-text-2\">1st come win more</p>\n      <a onClick={validatesheet} className=\"u-btn u-btn-round u-button-style u-hover-palette-1-light-2 u-palette-1-base u-radius-2 u-btn-1\">Submit&nbsp;<span className=\"u-icon u-text-white\"><svg className=\"u-svg-content\" viewBox=\"0 0 512 512\" x=\"0px\" y=\"0px\" style={{width: '1em', height: '1em'}}><path d=\"M506.134,241.843c-0.006-0.006-0.011-0.013-0.018-0.019l-104.504-104c-7.829-7.791-20.492-7.762-28.285,0.068 c-7.792,7.829-7.762,20.492,0.067,28.284L443.558,236H20c-11.046,0-20,8.954-20,20c0,11.046,8.954,20,20,20h423.557 l-70.162,69.824c-7.829,7.792-7.859,20.455-0.067,28.284c7.793,7.831,20.457,7.858,28.285,0.068l104.504-104 c0.006-.006,0.011-.013,0.018-.019C513.968,262.339,513.943,249.635,506.134,241.843z\" /></svg><img /></span>\n      </a>\n      <div className=\"u-container-style u-group u-group-2\">\n    \n      <div class=\"mb-3\">\n        <label for=\"\" class=\"form-label\">Choose attendence file</label>\n\n        <input\n        type=\"file\" \n        class=\"form-control\"\n        name=\"upload\"\n        id=\"upload\"\n        onChange={readUploadFile}\n        aria-describedby=\"fileHelpId\"/>\n\n        <div id=\"fileHelpId\" class=\"form-text\">Biomatric generated attendence sheet*</div>\n      </div>\n\n      </div>\n    </div>\n  </div>\n  </section>\n\n    </div>\n  )\n}\n\nexport default Spinningmain","import React, { Component } from 'react'\nimport \"./styles.css\"\nimport \"./BGDspinner.scoped.css\"\nimport \"./nicepage.scoped.css\"\n\nexport class Spinningwheel extends Component {\n\n  \n    state = {\n\n        list : JSON.parse ( window.localStorage.getItem('participents')),\n       \n        radius: 75, // PIXELS\n        rotate: 0, // DEGREES\n        easeOut: 0, // SECONDS\n        angle: 0, // RADIANS\n        top: null, // INDEX\n        offset: null, // RADIANS\n        net: null, // RADIANS\n        result: null, // INDEX\n        spinning: false\n        \n      };\n      \n    \n      componentDidMount() {\n        // generate canvas wheel on load\n        // console.log(\"lists:\",window.localStorage.getItem('user'))\n        // console.log( 'list:', window.localStorage.getItem('participents'))\n        this.renderWheel();\n      }\n    \n      renderWheel() {\n        // determine number/size of sectors that need to created\n        let numOptions = this.state.list.length;\n        let arcSize = (2 * Math.PI) / numOptions;\n        this.setState({\n          angle: arcSize\n        });\n    \n        // get index of starting position of selector\n        this.topPosition(numOptions, arcSize);\n    \n        // dynamically generate sectors from state list\n        let angle = 0;\n        for (let i = 0; i < numOptions; i++) {\n          let text = this.state.list[i];\n          this.renderSector(i + 1, text, angle, arcSize, this.getColor());\n          angle += arcSize;\n        }\n      }\n    \n      topPosition = (num, angle) => {\n        // set starting index and angle offset based on list length\n        // works upto 9 options\n        let topSpot = null;\n        let degreesOff = null;\n        if (num === 9) {\n          topSpot = 7;\n          degreesOff = Math.PI / 2 - angle * 2;\n        } else if (num === 8) {\n          topSpot = 6;\n          degreesOff = 0;\n        } else if (num <= 7 && num > 4) {\n          topSpot = num - 1;\n          degreesOff = Math.PI / 2 - angle;\n        } else if (num === 4) {\n          topSpot = num - 1;\n          degreesOff = 0;\n        } else if (num <= 3) {\n          topSpot = num;\n          degreesOff = Math.PI / 2;\n        }\n    \n        this.setState({\n          top: topSpot - 1,\n          offset: degreesOff\n        });\n      };\n    \n      renderSector(index, text, start, arc, color) {\n        // create canvas arc for each list element\n        let canvas = document.getElementById(\"wheel\");\n        let ctx = canvas.getContext(\"2d\");\n        let x = canvas.width / 2;\n        let y = canvas.height / 2;\n        let radius = this.state.radius;\n        let startAngle = start;\n        let endAngle = start + arc;\n        let angle = index * arc;\n        let baseSize = radius * 3.33;\n        let textRadius = baseSize - 130;\n    \n        ctx.beginPath();\n        ctx.arc(x, y, radius, startAngle, endAngle, false);\n        ctx.lineWidth = radius * 2;\n        ctx.strokeStyle = color;\n    \n        ctx.font = \"9px Arial\";\n        ctx.fillStyle = \"black\";\n        ctx.stroke();\n    \n        ctx.save();\n        ctx.translate(\n          baseSize + Math.cos(angle - arc / 2) * textRadius,\n          baseSize + Math.sin(angle - arc / 2) * textRadius\n        );\n        ctx.rotate(angle - arc / 2 + Math.PI / 2);\n        ctx.fillText(text, -ctx.measureText(text).width / 2, 0);\n        ctx.restore();\n      }\n    \n      getColor() {\n        // randomly generate rbg values for wheel sectors\n        let r = Math.floor(Math.random() * 255);\n        let g = Math.floor(Math.random() * 255);\n        let b = Math.floor(Math.random() * 255);\n        return `rgba(${r},${g},${b},0.4)`;\n      }\n    \n      spin = () => {\n        // set random spin degree and ease out time\n        // set state variables to initiate animation\n        let randomSpin = Math.floor(Math.random() * 900) + 500;\n        this.setState({\n          rotate: randomSpin,\n          easeOut: 2,\n          spinning: true\n        });\n    \n        // calcalute result after wheel stops spinning\n        setTimeout(() => {\n          this.getResult(randomSpin);\n        }, 2000);\n      };\n    \n      getResult = spin => {\n        // find net rotation and add to offset angle\n        // repeat substraction of inner angle amount from total distance traversed\n        // use count as an index to find value of result from state list\n        const { angle, top, offset, list } = this.state;\n        let netRotation = ((spin % 360) * Math.PI) / 180; // RADIANS\n        let travel = netRotation + offset;\n        let count = top + 1;\n        while (travel > 0) {\n          travel = travel - angle;\n          count--;\n        }\n        let result;\n        if (count >= 0) {\n          result = count;\n        } else {\n          result = list.length + count;\n        }\n    \n        // set state variable to display result\n        this.setState({\n          net: netRotation,\n          result: result\n        });\n      };\n    \n      reset = () => {\n        // reset wheel and result\n        this.setState({\n          rotate: 0,\n          easeOut: 0,\n          result: null,\n          spinning: false\n        });\n      };\n\n  render() {\n    return (\n        <div className=\"u-body u-xl-mode\">\n     \n\n    <div>\n  <section className=\"u-clearfix u-custom-color-4 u-section-1\" id=\"sec-1b4d\">\n    <div className=\"u-clearfix u-expanded-width u-layout-wrap u-layout-wrap-1\">\n      <div className=\"u-layout\">\n        <div className=\"u-layout-row\">\n          <div className=\"u-container-style u-layout-cell u-size-35 u-layout-cell-1\">\n            <div className=\"u-container-layout u-container-layout-1\">\n\n        \n<span id=\"selector\"> <img src=\"images/arrow.png\" style={{ height: \"70px\" , transform: \"rotate(77deg)\" }} alt=\"\" /> </span>\n<canvas\n  id=\"wheel\"\n  width=\"500\"\n  height=\"500\"\n  style={{\n    WebkitTransform: `rotate(${this.state.rotate}deg)`,\n    WebkitTransition: `-webkit-transform ${\n      this.state.easeOut\n    }s ease-out`\n  }}\n/>\n\n<img src=\"images/pillar.png\" style={{\n\nheight: \"176px\",\nposition: \"absolute\",\ntop: \"419px\",\nright: \"513px\"\n\n}}   alt=\"\" />\n\n{this.state.spinning ? (\n  <button type=\"button\" id=\"reset\" onClick={this.reset}>\n    reset\n  </button>\n) : (\n  <button type=\"button\" id=\"spin\" onClick={this.spin}>\n    spin\n  </button>\n)}\n\n            </div>\n          </div>\n          <div className=\"u-container-style u-layout-cell u-size-25 u-layout-cell-2\">\n            <div className=\"u-container-layout u-valign-middle u-container-layout-2\">\n              <h4 className=\"u-text u-text-default u-text-1\">\n                <span style={{fontWeight: 700, fontSize: '2.25rem'}}>BGD Spinner</span>\n                <br />\n              </h4>\n              <div className=\"u-container-style u-custom-color-1 u-expanded-width u-group u-radius-12 u-shape-round u-group-1 shadow \">\n                <div className=\"u-container-layout u-container-layout-3\">\n                  <h5 className=\"u-text u-text-default u-text-white u-text-2\">Winner</h5>\n                  <p className='resulttext' >{ this.state.list[this.state.result] } </p>\n                </div>\n              </div>\n              <a href=\"/\" id='backicon' className=\"u-active-none u-btn u-button-style u-hover-none u-none u-text-hover-palette-2-base u-text-palette-1-base u-btn-2\"><span className=\"u-file-icon u-icon u-text-custom-color-1\"><img src=\"images/507257-7d3ee33e.png\" alt /></span>&nbsp;Go Back\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n\n</div>\n\n\n        \n      </div>  \n    \n      \n    )\n  }\n}\n\nexport default Spinningwheel\n\n\n\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Spinningmain from \"./spinningmain/Spinningmain.jsx\";\nimport Spinningwheel from \"./spinningwheel/Spinningwheel.jsx\";\n\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n\n\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL} >\n      <Routes>\n\n          <Route path=\"/\" element={<Spinningwheel/>} /> \n          <Route path=\"/BGTspinwheel/bgdspinner\" element={<Spinningwheel/>} /> \n        \n      </Routes>\n    </BrowserRouter>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}